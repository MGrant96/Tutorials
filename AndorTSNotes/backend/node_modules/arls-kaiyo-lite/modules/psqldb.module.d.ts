/// <reference types="node" />
import { PoolClient } from "pg";
import { EventEmitter } from "events";
interface IPsqlDbConfig {
    host?: string;
    port?: number;
    database: string;
    user?: string;
    password?: string;
    max?: number;
    connectionTimeoutMillis?: number;
    idleTimeoutMillis?: number;
    listen?: string[];
    autoConnect: boolean;
}
interface IDeleteEntry {
    table: string;
    key: string | number | boolean;
    key_field?: string;
    where?: string;
}
export declare class PsqlDbModule extends EventEmitter {
    private config;
    client: PoolClient;
    isConnected: boolean;
    private pool;
    constructor(config: IPsqlDbConfig);
    connect(config?: IPsqlDbConfig | null): Promise<unknown>;
    disconnect(): Promise<unknown>;
    get connectedDbName(): string;
    private onConnect;
    private onClose;
    execute(query: any): Promise<any>;
    countRows(table: string, where?: string): Promise<number>;
    select(args: any): Promise<import("pg").QueryResult<any>>;
    delete(args: IDeleteEntry): Promise<import("pg").QueryResult<any>>;
    insert(table_name: string, data: any): Promise<import("pg").QueryResult<any>>;
    update(table_name: string, data: any, key?: string, where?: string, wildcs?: boolean): Promise<import("pg").QueryResult<any>>;
}
export declare function createPsqlDbConnection(config: IPsqlDbConfig): {
    psqlDbModule: typeof PsqlDbModule;
    injector: {
        config: IPsqlDbConfig;
    };
};
export {};
