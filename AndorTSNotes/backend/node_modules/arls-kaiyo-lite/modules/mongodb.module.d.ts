import { Db, Collection } from "mongodb/";
interface IMongoDbConfig {
    host: string;
    port: string | number;
    dbName: string;
    replSet?: string;
    username?: string;
    password?: string;
    reconnectTimeoutMs?: number;
    autoConnect?: boolean;
}
interface IMongoFindPaginationParams {
    page: number;
    itemsPerPage: number;
    excludes?: Array<string>;
    sortBy?: Array<string> | null;
    sortDir?: Array<number>;
    aggregate?: any;
}
interface IMongoFindPaginationResponse {
    documents: Array<any>;
    pageTotal: number;
    documentsTotal: number;
}
interface _Collection extends Collection {
    findPagination: (query: object, opts: IMongoFindPaginationParams) => Promise<IMongoFindPaginationResponse>;
}
declare class _Db extends Db {
    collection<TSchema = any>(name: string): _Collection;
}
export declare class MongodbModule {
    private config;
    db: _Db;
    private reconnectTimeoutMs;
    constructor(config: IMongoDbConfig);
    connect(config?: IMongoDbConfig | null): Promise<boolean>;
    private setMongoClient;
    private setUpConnectionUrl;
}
export declare function createMongoDbConnection(config: IMongoDbConfig): {
    mongodbModule: typeof MongodbModule;
    injector: {
        config: IMongoDbConfig;
    };
};
export {};
