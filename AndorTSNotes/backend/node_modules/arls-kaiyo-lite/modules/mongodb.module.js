"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMongoDbConnection = exports.MongodbModule = void 0;
var mongodb_1 = require("mongodb/");
var arls_logger_1 = __importDefault(require("arls-logger"));
var _Db = /** @class */ (function (_super) {
    __extends(_Db, _super);
    function _Db() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    _Db.prototype.collection = function (name) {
        return _super.prototype.collection.call(this, name);
    };
    return _Db;
}(mongodb_1.Db));
var collection = require('mongodb/lib/collection');
collection.prototype.findPagination = function (query, opts) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var options, i, promise, sort, i, skip, limit, _c, documents, documentsTotal, pageTotal, err_1;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 2, , 3]);
                    options = {
                        projection: {}
                    };
                    if (opts.excludes) {
                        for (i = 0; i < opts.excludes.length; i++) {
                            options.projection[opts.excludes[i]] = 0;
                        }
                    }
                    promise = this.s.db.collection(this.s.namespace.collection);
                    if (opts.aggregate) {
                        promise = promise.aggregate(opts.aggregate);
                    }
                    else {
                        promise = promise.find(query, options);
                    }
                    if (((_a = opts.sortBy) === null || _a === void 0 ? void 0 : _a.length) && ((_b = opts.sortDir) === null || _b === void 0 ? void 0 : _b.length)) {
                        sort = {};
                        for (i = 0; i < opts.sortBy.length; i++) {
                            sort[opts.sortBy[i]] = opts.sortDir[i];
                        }
                        promise = promise.sort(sort);
                    }
                    skip = (opts.page - 1) * opts.itemsPerPage;
                    promise = promise.skip(skip);
                    limit = opts.itemsPerPage;
                    promise = promise.limit(limit);
                    return [4 /*yield*/, Promise.all([
                            promise.toArray(),
                            this.s.db.collection(this.s.namespace.collection).countDocuments(query)
                        ])];
                case 1:
                    _c = _d.sent(), documents = _c[0], documentsTotal = _c[1];
                    pageTotal = Math.ceil(parseInt(documentsTotal) / limit);
                    return [2 /*return*/, {
                            documents: documents,
                            documentsTotal: parseInt(documentsTotal),
                            pageTotal: pageTotal
                        }];
                case 2:
                    err_1 = _d.sent();
                    throw err_1;
                case 3: return [2 /*return*/];
            }
        });
    });
};
var MongodbModule = /** @class */ (function () {
    function MongodbModule(config) {
        this.config = config;
        this.reconnectTimeoutMs = 5000;
        if (config.autoConnect || config.autoConnect === undefined) {
            this.connect();
        }
    }
    MongodbModule.prototype.connect = function (config) {
        var _this = this;
        if (config === void 0) { config = null; }
        return new Promise(function (resolve, reject) {
            if (config) {
                _this.config = config;
            }
            var mongoClient = _this.setMongoClient();
            mongoClient
                .connect()
                .then(function (client) {
                _this.db = client.db();
                arls_logger_1.default.info('MongoDbService', "Connected to " + _this.config.host + ":" + _this.config.port + "/" + _this.config.dbName);
                resolve(true);
            })
                .catch(function (error) {
                arls_logger_1.default.error('MongoDbService', error);
                if (config === null || config === void 0 ? void 0 : config.autoConnect) {
                    setTimeout(function () {
                        _this.connect();
                    }, _this.config.reconnectTimeoutMs || _this.reconnectTimeoutMs);
                }
                else {
                    reject();
                }
            });
        });
    };
    MongodbModule.prototype.setMongoClient = function () {
        var mongodbUrl = this.setUpConnectionUrl(this.config);
        var options = {
            useUnifiedTopology: true
        };
        return new mongodb_1.MongoClient(mongodbUrl, options);
    };
    MongodbModule.prototype.setUpConnectionUrl = function (mongoConf) {
        var mongodbUrl = "mongodb://";
        mongodbUrl += mongoConf.username
            ? mongoConf.username + ":" + mongoConf.password + "@"
            : "";
        mongodbUrl +=
            mongoConf.host +
                ":" +
                mongoConf.port +
                "/" +
                mongoConf.dbName +
                "?readPreference=primaryPreferred";
        return mongodbUrl;
    };
    return MongodbModule;
}());
exports.MongodbModule = MongodbModule;
function createMongoDbConnection(config) {
    return {
        mongodbModule: MongodbModule,
        injector: { config: config }
    };
}
exports.createMongoDbConnection = createMongoDbConnection;
