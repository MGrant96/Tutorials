"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptoModule = void 0;
var crypto_1 = __importDefault(require("crypto"));
var CryptoModule = /** @class */ (function () {
    function CryptoModule(key) {
        if (key === void 0) { key = "ZDTQwtEvPVa5mAHHBrZe8krx68r34SqD"; }
        this.key = key;
    }
    CryptoModule.prototype.setKey = function (key) {
        this.key = key;
    };
    CryptoModule.prototype.encrypt = function (text) {
        console.time('test1');
        var iv = crypto_1.default.randomBytes(16);
        var cipher = crypto_1.default.createCipheriv('aes-256-cbc', Buffer.from(this.key), iv);
        var encrypted = cipher.update(text);
        encrypted = Buffer.concat([encrypted, cipher.final()]);
        console.timeEnd('test1');
        return iv.toString('hex') + ':' + encrypted.toString('hex');
    };
    CryptoModule.prototype.decrypt = function (text) {
        try {
            var textParts = text.split(':');
            var iv = void 0;
            var encryptedText = text;
            encryptedText = textParts[1];
            iv = Buffer.from(textParts[0], 'hex');
            var decipher = crypto_1.default.createDecipheriv('aes-256-cbc', Buffer.from(this.key), iv);
            var decrypted = decipher.update(Buffer.from(encryptedText, 'hex'));
            decrypted = Buffer.concat([decrypted, decipher.final()]);
            return decrypted.toString();
        }
        catch (e) {
            console.log(e);
            return text;
        }
    };
    return CryptoModule;
}());
exports.CryptoModule = CryptoModule;
