"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPsqlDbConnection = exports.PsqlDbModule = void 0;
var pg_1 = require("pg");
var events_1 = require("events");
var arls_logger_1 = __importDefault(require("arls-logger"));
var default_conf = {
    host: "localhost",
    port: 5432,
    database: "",
    user: "",
    password: "",
    max: 20,
    connectionTimeoutMillis: 0,
    idleTimeoutMillis: 0,
    autoConnect: true
};
var default_delete = {
    key_field: "id",
};
var PsqlDbModule = /** @class */ (function (_super) {
    __extends(PsqlDbModule, _super);
    function PsqlDbModule(config) {
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.isConnected = false;
        _this.config = __assign(__assign({}, default_conf), config);
        if (_this.config.autoConnect) {
            _this.connect();
        }
        return _this;
    }
    PsqlDbModule.prototype.connect = function (config) {
        var _this = this;
        if (config === void 0) { config = null; }
        return new Promise(function (resolve, reject) {
            if (config) {
                _this.config = config;
            }
            if (!_this.pool)
                _this.pool = new pg_1.Pool(_this.config);
            _this.pool.connect()
                .then(function (client) {
                _this.onConnect(client);
                resolve(true);
            })
                .catch(function (error) {
                arls_logger_1.default.error("PostgresDbDataSource", error.toString());
                if (_this.config.autoConnect) {
                    setTimeout(function () {
                        _this.connect();
                    }, 5000);
                }
                else {
                    reject();
                }
            });
        });
    };
    PsqlDbModule.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (!_this.pool) {
                            resolve();
                            return;
                        }
                        _this.pool.end().then(function () {
                            resolve();
                        });
                    })];
            });
        });
    };
    Object.defineProperty(PsqlDbModule.prototype, "connectedDbName", {
        get: function () {
            if (this.isConnected) {
                return this.config.database;
            }
            else {
                return "";
            }
        },
        enumerable: false,
        configurable: true
    });
    PsqlDbModule.prototype.onConnect = function (client) {
        var _this = this;
        this.client = client;
        this.isConnected = true;
        arls_logger_1.default.success("PostgresDbDataSource", "PostgresDb is connected to " + this.config.database);
        this.client.on("error", function (error) {
            arls_logger_1.default.error("PostgresDbDataSource", error);
        });
        if (this.config.listen && this.config.listen.length > 0) {
            this.client.on('notification', function (msg) {
                var payload = JSON.parse(msg.payload);
                _this.emit(msg.channel, payload);
            });
            this.config.listen.forEach(function (evt) {
                _this.client.query("LISTEN " + evt).then(function () {
                    arls_logger_1.default.log("PSQL", "Listening to " + evt + " events");
                }).catch(function (err) {
                    arls_logger_1.default.error("PSQL", "Subscription to " + evt + " events failed", err);
                });
            });
        }
        this.client.on("end", function () {
            _this.onClose();
        });
    };
    PsqlDbModule.prototype.onClose = function () {
        var _this = this;
        this.isConnected = false;
        setTimeout(function () {
            _this.connect();
        }, 5000);
    };
    PsqlDbModule.prototype.execute = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.client.query(query)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        throw { error: error_1, query: query };
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PsqlDbModule.prototype.countRows = function (table, where) {
        if (where === void 0) { where = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                if (!this.isConnected)
                    throw "Not Connected";
                query = "SELECT count(*) FROM " + table;
                if (where) {
                    query += ' WHERE ' + where;
                }
                return [2 /*return*/, this.client.query(query).then(function (result) {
                        return result.rows[0].count;
                    })];
            });
        });
    };
    PsqlDbModule.prototype.select = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var query, error_2, def, query, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected)
                            throw "Not Connected";
                        if (!(typeof args === typeof "string")) return [3 /*break*/, 5];
                        query = "SELECT * FROM " + args;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.client.query(query)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_2 = _a.sent();
                        throw { error: error_2, query: query };
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        def = {
                            table: null,
                            fields: ["*"],
                            where: null,
                            offset: null,
                            next: null,
                            orderBy: null
                        };
                        args = __assign(__assign({}, def), args);
                        query = "SELECT " + args.fields.join(",") + " FROM " + args.table;
                        if (args.where) {
                            query += " WHERE " + args.where;
                        }
                        if (args.orderBy) {
                            query += " ORDER BY " + args.orderBy;
                        }
                        if (args.offset !== null && args.next !== null) {
                            query += " OFFSET " + args.offset + " ROWS FETCH NEXT " + args.next + " ROWS ONLY";
                        }
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.client.query(query)];
                    case 7: return [2 /*return*/, _a.sent()];
                    case 8:
                        error_3 = _a.sent();
                        throw { error: error_3, query: query };
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    PsqlDbModule.prototype.delete = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var query, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isConnected)
                            throw "Not Connected";
                        args = __assign(__assign({}, default_delete), { args: args });
                        if (!!args.where) return [3 /*break*/, 5];
                        query = "DELETE FROM " + args.table + " WHERE " + args.key_field + " = $1";
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.client.query(query, [args.key])];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_4 = _a.sent();
                        throw { error: error_4, query: query };
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        query = "DELETE FROM " + args.table + " WHERE " + args.where + " RETURNING *";
                        try {
                            return [2 /*return*/, this.client.query(query)];
                        }
                        catch (error) {
                            throw { error: error, query: query };
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PsqlDbModule.prototype.insert = function (table_name, data) {
        return __awaiter(this, void 0, void 0, function () {
            var values, v_wildcs, fields, index, len, i, v_wildc, prop, v_wildc, prop, v_wildc, prop, v_wildcs_string, query;
            return __generator(this, function (_a) {
                if (!this.isConnected)
                    throw "Not Connected";
                values = [];
                v_wildcs = [];
                fields = [];
                index = 1;
                if (Array.isArray(data)) {
                    len = data.length;
                    for (i = 0; i < len; i++) {
                        if (fields.length === 0) {
                            v_wildc = [];
                            for (prop in data[i]) {
                                if (data[i].hasOwnProperty(prop)) {
                                    fields.push(prop);
                                    values.push(data[i][prop]);
                                    v_wildc.push("$" + index);
                                    index++;
                                }
                            }
                            v_wildcs.push(v_wildc.join(","));
                        }
                        else {
                            v_wildc = [];
                            for (prop in data[i]) {
                                if (data[i].hasOwnProperty(prop)) {
                                    values.push(data[i][prop]);
                                    v_wildc.push("$" + index);
                                    index++;
                                }
                            }
                            v_wildcs.push(v_wildc.join(","));
                        }
                    }
                }
                else {
                    v_wildc = [];
                    for (prop in data) {
                        if (data.hasOwnProperty(prop)) {
                            fields.push(prop);
                            values.push(data[prop]);
                            v_wildc.push("$" + index);
                            index++;
                        }
                    }
                    v_wildcs.push(v_wildc.join(","));
                }
                v_wildcs_string = "(" + v_wildcs.join("),(") + ")";
                query = "INSERT INTO " + table_name + " (" + fields + ") VALUES " + v_wildcs_string + " RETURNING *";
                try {
                    return [2 /*return*/, this.client.query(query, values)];
                }
                catch (error) {
                    throw { error: error, query: query };
                }
                return [2 /*return*/];
            });
        });
    };
    PsqlDbModule.prototype.update = function (table_name, data, key, where, wildcs) {
        if (key === void 0) { key = "id"; }
        if (where === void 0) { where = ""; }
        if (wildcs === void 0) { wildcs = true; }
        return __awaiter(this, void 0, void 0, function () {
            var key_value, set_values, values, value, index, prop, value, prop, query;
            return __generator(this, function (_a) {
                if (!this.isConnected)
                    throw "Not Connected";
                if (key && !data.hasOwnProperty(key)) {
                    throw "PostgresDbService - Key '" + key + "' does not exist in the object";
                }
                key_value = '';
                if (!where && key) {
                    key_value = data[key];
                    delete data[key];
                }
                set_values = "";
                values = [];
                if (wildcs) {
                    value = [];
                    index = 1;
                    for (prop in data) {
                        if (data.hasOwnProperty(prop)) {
                            value.push(prop + "=$" + index);
                            values.push(data[prop]);
                            index++;
                        }
                    }
                    set_values = value.join(",");
                }
                else {
                    value = [];
                    for (prop in data) {
                        if (data.hasOwnProperty(prop)) {
                            value.push(prop + "=" + data[prop]);
                        }
                    }
                    set_values = value.join(",");
                }
                if (!where && key && key_value) {
                    where = key + "=" + key_value;
                }
                query = "UPDATE " + table_name + " SET " + set_values + " WHERE " + where + " RETURNING *";
                try {
                    if (wildcs) {
                        return [2 /*return*/, this.client.query(query, values)];
                    }
                    else {
                        return [2 /*return*/, this.client.query(query)];
                    }
                }
                catch (error) {
                    throw { error: error, query: query };
                }
                return [2 /*return*/];
            });
        });
    };
    return PsqlDbModule;
}(events_1.EventEmitter));
exports.PsqlDbModule = PsqlDbModule;
function createPsqlDbConnection(config) {
    return {
        psqlDbModule: PsqlDbModule,
        injector: { config: config }
    };
}
exports.createPsqlDbConnection = createPsqlDbConnection;
