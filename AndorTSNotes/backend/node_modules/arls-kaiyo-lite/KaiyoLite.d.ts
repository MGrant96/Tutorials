/// <reference types="node" />
import * as core from "express-serve-static-core";
import { AwilixContainer } from "awilix";
import * as Http from "http";
import * as Https from "https";
import { IMiddleware, IModules, IProvider } from "./interfaces/modules.interface";
import { IOpts } from "./interfaces/opts.interface";
declare module "express-serve-static-core" {
    interface Response {
        success(data: any): this;
        error(msg: string, details: Object | null): this;
    }
}
declare const AppContainer: AwilixContainer;
export declare function setUpEnvVariables(): void;
declare class KaiyoLite {
    private modules;
    private opts?;
    express: core.Express;
    httpServer: Https.Server | Http.Server;
    httpCb: () => void;
    socketCb: () => void;
    constructor(modules: IModules, opts?: IOpts | undefined);
    onHttpInit(cb: () => void): void;
    onSocketInit(cb: () => void): void;
    httpServerSetup(): void;
    get listeningPort(): string;
    private registerProviders;
    addProvider(provider: IProvider): void;
    private registerProvider;
    private registerProviderWithInjector;
    setUpExpress(): void;
    loadApiRoutes(routes: Array<any>): void;
    setPublicFolder(): void;
    setUpMiddlewares(middlewares: Array<IMiddleware> | undefined): void;
    setGuiPublicFolder(): void;
    listenHttp(port?: number | null): void;
    private startHttp;
    private getFreePort;
}
export { KaiyoLite, IModules, AppContainer };
