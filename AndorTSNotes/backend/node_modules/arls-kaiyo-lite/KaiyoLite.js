"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppContainer = exports.KaiyoLite = exports.setUpEnvVariables = void 0;
var express_1 = __importStar(require("express"));
var awilix_1 = require("awilix");
var awilix_express_1 = require("awilix-express");
var path_1 = __importDefault(require("path"));
var Http = __importStar(require("http"));
var log_enum_1 = require("./enums/log.enum");
var server_env_enum_1 = require("./enums/server-env.enum");
var fs_1 = __importDefault(require("fs"));
var arls_logger_1 = __importDefault(require("arls-logger"));
var net = __importStar(require("net"));
var response_api_model_1 = require("./models/response-api.model");
var http_response_codes_enum_1 = require("./enums/http-response-codes.enum");
var socket_server_module_1 = require("./modules/socket-server.module");
express_1.response.success = function (data) {
    return this.status(http_response_codes_enum_1.HttpStatusCode.Ok).json(new response_api_model_1.ResponseApiSuccess(data));
};
express_1.response.error = function (msg, details, status) {
    if (msg === void 0) { msg = ""; }
    if (details === void 0) { details = null; }
    if (status === void 0) { status = http_response_codes_enum_1.HttpStatusCode.InternalServerError; }
    return this.status(status).json(new response_api_model_1.ResponseApiError(msg, details));
};
var AppContainer = awilix_1.createContainer({ injectionMode: awilix_1.InjectionMode.CLASSIC });
exports.AppContainer = AppContainer;
function setUpEnvVariables() {
    process.env.ROOT_FOLDER = __dirname;
    var allowed_args = {
        "-config": "CONFIG_PATH",
    };
    var args = process.argv.slice(2);
    if (args.length % 2 === 0) {
        for (var i = 0; i < args.length; i += 2) {
            if (args[i].startsWith("-")) {
                var k = args[i];
                var key = allowed_args[k];
                if (key) {
                    process.env[key] = args[i + 1];
                }
                else {
                    arls_logger_1.default.fatal("[ARG ERROR]: Unknown key '" + args[i] + "'");
                }
            }
            else {
                arls_logger_1.default.fatal("[ARG ERROR]: Invalid key '" + args[i] + "'");
            }
        }
    }
    if (process.env.CONFIG_PATH && fs_1.default.existsSync(process.env.CONFIG_PATH)) {
        var config = JSON.parse(fs_1.default.readFileSync(process.env.CONFIG_PATH).toString());
        process.env = __assign(__assign({}, config), process.env);
        arls_logger_1.default.info("Config read", "True");
    }
    else {
        arls_logger_1.default.info("Config read", "False");
    }
}
exports.setUpEnvVariables = setUpEnvVariables;
setUpEnvVariables();
var KaiyoLite = /** @class */ (function () {
    function KaiyoLite(modules, opts) {
        this.modules = modules;
        this.opts = opts;
        this.registerProviders();
        if ((opts === null || opts === void 0 ? void 0 : opts.httpServer) != false) {
            this.httpServerSetup();
        }
    }
    KaiyoLite.prototype.onHttpInit = function (cb) {
        this.httpCb = cb;
    };
    KaiyoLite.prototype.onSocketInit = function (cb) {
        this.socketCb = cb;
    };
    KaiyoLite.prototype.httpServerSetup = function () {
        var _this = this;
        var _a, _b;
        this.express = express_1.default();
        this.httpServer = new Http.Server(this.express);
        this.httpServer.on('listening', function () {
            var _a;
            if (_this.httpCb)
                _this.httpCb();
            arls_logger_1.default.info('HttpServer', "" + log_enum_1.Color.BgBlue + log_enum_1.Color.FgBlack + " LISTENING " + log_enum_1.Color.Reset + " on: " + _this.listeningPort);
            if (((_a = _this.opts) === null || _a === void 0 ? void 0 : _a.socketServer) !== false) {
                var socket = AppContainer.resolve("socketServerModule");
                socket.connect(_this.httpServer, _this.socketCb);
            }
        });
        this.setUpExpress();
        this.setUpMiddlewares(this.modules.middlewares);
        if ((_a = this.modules) === null || _a === void 0 ? void 0 : _a.routes) {
            this.loadApiRoutes(this.modules.routes);
        }
        this.setPublicFolder();
        this.setGuiPublicFolder();
        if ((_b = this.opts) === null || _b === void 0 ? void 0 : _b.httpAutoListen) {
            this.listenHttp();
        }
    };
    Object.defineProperty(KaiyoLite.prototype, "listeningPort", {
        get: function () {
            var port = 'n/a;';
            var address = this.httpServer.address();
            if (address === null || address === void 0 ? void 0 : address.port) {
                port = address.port;
            }
            return port;
        },
        enumerable: false,
        configurable: true
    });
    KaiyoLite.prototype.registerProviders = function () {
        var _a;
        var modules = this.modules;
        if (((_a = this.opts) === null || _a === void 0 ? void 0 : _a.socketServer) !== false) {
            this.registerProvider("socketServerModule", socket_server_module_1.SocketServerModule, false);
        }
        if (modules.providers) {
            for (var i = 0; i < modules.providers.length; i++) {
                if (typeof modules.providers[i] === "object") {
                    var immediate = modules.providers[i].immediate === false ? false : true;
                    var injector = modules.providers[i].injector || null;
                    delete modules.providers[i].immediate;
                    delete modules.providers[i].injector;
                    for (var key in modules.providers[i]) {
                        if (modules.providers[i].hasOwnProperty(key)) {
                            if (injector) {
                                this.registerProviderWithInjector(key, modules.providers[i][key], injector, immediate);
                            }
                            else {
                                this.registerProvider(key, modules.providers[i][key], immediate);
                            }
                        }
                    }
                }
                else {
                    this.registerProvider(modules.providers[i].name, modules.providers[i], true);
                }
            }
        }
        // Controllers
        if (modules.controllers) {
            for (var i = 0; i < modules.controllers.length; i++) {
                if (typeof modules.controllers[i] === "object") {
                    var immediate = modules.controllers[i].immediate === false ? false : true;
                    delete modules.controllers[i].immediate;
                    for (var key in modules.controllers[i]) {
                        this.registerProvider(key, modules.controllers[i][key], immediate);
                    }
                }
                else {
                    this.registerProvider(modules.controllers[i].name, modules.controllers[i]);
                }
            }
        }
    };
    KaiyoLite.prototype.addProvider = function (provider) {
        if (typeof provider === "object") {
            var immediate = provider.immediate === false ? false : true;
            var injector = provider.injector || null;
            delete provider.immediate;
            delete provider.injector;
            for (var key in provider) {
                if (provider.hasOwnProperty(key)) {
                    if (injector) {
                        this.registerProviderWithInjector(key, provider[key], injector, immediate);
                    }
                    else {
                        this.registerProvider(key, provider[key], immediate);
                    }
                }
            }
        }
        else {
            // @ts-ignore
            this.registerProvider(provider.name, provider, true);
        }
    };
    KaiyoLite.prototype.registerProvider = function (key, provider, immediateResolve) {
        var _a;
        if (immediateResolve === void 0) { immediateResolve = false; }
        var name = key.charAt(0).toLowerCase() + key.slice(1);
        if (!AppContainer.has(name)) {
            AppContainer.register((_a = {},
                _a[name] = awilix_1.asClass(provider).singleton(),
                _a));
            if (immediateResolve) {
                AppContainer.resolve(name);
            }
        }
        else {
            arls_logger_1.default.warn('Awilix', 'The ' + name + ' provider already exists');
        }
    };
    KaiyoLite.prototype.registerProviderWithInjector = function (key, provider, injector, immediateResolve, injectionMode) {
        var _a;
        if (immediateResolve === void 0) { immediateResolve = false; }
        if (injectionMode === void 0) { injectionMode = 'classic'; }
        var name = key.charAt(0).toLowerCase() + key.slice(1);
        if (!AppContainer.has(name)) {
            var a = awilix_1.asClass(provider, {
                injector: function () { return (injector); }
            });
            AppContainer.register((_a = {},
                _a[name] = a.singleton()[injectionMode](),
                _a));
            if (immediateResolve) {
                AppContainer.resolve(name);
            }
        }
        else {
            arls_logger_1.default.warn('Awilix', 'The ' + name + ' provider already exists');
        }
    };
    KaiyoLite.prototype.setUpExpress = function () {
        var bodyParser = require("body-parser");
        var cors = require("cors");
        var helmet = require("helmet");
        this.express.use(helmet());
        this.express.use(cors());
        this.express.use(bodyParser.json());
        // Container to the routes
        this.express.use(awilix_express_1.scopePerRequest(AppContainer));
    };
    KaiyoLite.prototype.loadApiRoutes = function (routes) {
        for (var i = 0; i < routes.length; i++) {
            this.express.use(awilix_express_1.controller(routes[i]));
        }
    };
    KaiyoLite.prototype.setPublicFolder = function () {
        var publicFolder = process.env.PUBLIC_FOLDER || (path_1.default.join(__dirname, './public'));
        // this.express.use(publicFolder, authMiddleware());
        this.express.use(publicFolder, express_1.default.static(publicFolder));
    };
    KaiyoLite.prototype.setUpMiddlewares = function (middlewares) {
        var _this = this;
        this.express.use(function (req, res, next) {
            var requestStart = Date.now();
            res.on("finish", function () {
                var statusCode = res.statusCode, statusMessage = res.statusMessage;
                arls_logger_1.default.info("HTTP REQUEST", {
                    startTime: new Date(requestStart),
                    endTime: new Date(),
                    processingTime: Date.now() - requestStart + " ms",
                    type: req.method,
                    url: req.originalUrl,
                    response: {
                        statusCode: statusCode,
                        statusMessage: statusMessage
                    }
                });
            });
            next();
        });
        middlewares === null || middlewares === void 0 ? void 0 : middlewares.forEach(function (value) {
            if (value.function) {
                if (value.route) {
                    _this.express.use(value.route, awilix_express_1.makeInvoker(value.middleware)(value.function));
                }
                else {
                    _this.express.use(awilix_express_1.makeInvoker(value.middleware)(value.function));
                }
            }
            else {
                if (value.route) {
                    _this.express.use(value.route, value.middleware);
                }
                else {
                    _this.express.use(value.middleware);
                }
            }
        });
    };
    KaiyoLite.prototype.setGuiPublicFolder = function () {
        var guiFolder = process.env.GUI_FOLDER || (path_1.default.join(__dirname, './gui'));
        this.express.use(express_1.default.static(guiFolder));
        this.express.get(/.*/, function (req, res) {
            if (process.env.SERVER_ENV !== server_env_enum_1.ServerEnv.DEVELOPMENT) {
                var publicPath = path_1.default.join(guiFolder, "index.html");
                return res.sendFile(publicPath);
            }
        });
    };
    KaiyoLite.prototype.listenHttp = function (port) {
        var _this = this;
        if (port === void 0) { port = null; }
        if (port) {
            this.startHttp(port);
        }
        else if (process.env.SERVER_PORT) {
            var port_1 = parseInt(process.env.SERVER_PORT);
            this.startHttp(port_1);
        }
        else {
            this.getFreePort().then(function (port) {
                _this.startHttp(port);
            });
        }
    };
    KaiyoLite.prototype.startHttp = function (port) {
        var _this = this;
        this.httpServer.listen(port);
        this.httpServer.once('error', function (err) {
            if (err.code === 'EADDRINUSE') {
                arls_logger_1.default.warn('HttpServer', "Port " + port + " already in use. Trying next port...");
                _this.listenHttp(++port);
            }
            else {
                arls_logger_1.default.error('HttpServer', err);
            }
        });
    };
    KaiyoLite.prototype.getFreePort = function () {
        return new Promise(function (resolve, reject) {
            var server = net.createServer();
            server.on('error', function (err) {
                server.close();
                reject(err);
            });
            server.listen(0, function () {
                var address = server.address();
                var port = null;
                if (address && typeof address !== 'string')
                    port = address.port;
                server.close();
                if (!port) {
                    reject('There are no open ports');
                }
                else {
                    resolve(port);
                }
            });
        });
    };
    return KaiyoLite;
}());
exports.KaiyoLite = KaiyoLite;
