"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var log_enum_1 = require("./log.enum");
var path_1 = __importDefault(require("path"));
var pino_1 = require("pino");
var pino_2 = __importDefault(require("pino"));
var arls_utils_1 = require("arls-utils");
var ArlsLogger = /** @class */ (function () {
    function ArlsLogger() {
        this.serverEnv = "development";
        this.keep_files_for = 48; // hours
        console.log('Init Logger');
        this.options = {
            level: process.env.LOGS_LEVEL || "debug"
        };
        this.file_path = process.env.LOGS_FOLDER || './logs';
        if (!fs_1.default.existsSync(this.file_path)) {
            console.log("Creating folder:", this.file_path);
            fs_1.default.mkdirSync(this.file_path);
        }
        this.current_file_path = this.getFilename();
        this.createLoggers();
    }
    ArlsLogger.prototype.updateLogFile = function () {
        var _this = this;
        arls_utils_1.FileUtil.cleanupFolderByDate(this.file_path, this.keep_files_for, function (err) {
            if (err) {
                _this.error("Failed to clean log folder", err);
            }
        });
        var new_filename = this.getFilename();
        if (this.current_file_path !== new_filename) {
            this.current_file_path = new_filename;
            this.createLoggers();
        }
    };
    ArlsLogger.prototype.createLoggers = function () {
        this.access_logger = pino_2.default(this.options, pino_1.destination(this.current_file_path + "-access.log"));
        this.error_logger = pino_2.default(this.options, pino_1.destination(this.current_file_path + "-error.log"));
        this.info_logger = pino_2.default(this.options, pino_1.destination(this.current_file_path + "-info.log"));
    };
    ArlsLogger.prototype.getFilename = function () {
        return path_1.default.join(this.file_path, new Date().toISOString().split('T')[0]);
    };
    Object.defineProperty(ArlsLogger.prototype, "keepForHours", {
        set: function (v) {
            this.keep_files_for = v;
        },
        enumerable: false,
        configurable: true
    });
    ArlsLogger.prototype.success = function (msg) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.updateLogFile();
        if (this.serverEnv === "development") {
            this.logDev(msg, args, log_enum_1.LogLevel.Success);
        }
        (_a = this.info_logger) === null || _a === void 0 ? void 0 : _a.info(args, msg);
    };
    ArlsLogger.prototype.log = function (msg) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.info(msg, args);
    };
    ArlsLogger.prototype.info = function (msg) {
        var _a, _b;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.updateLogFile();
        if (this.serverEnv === "development") {
            this.logDev(msg, args, log_enum_1.LogLevel.Info);
        }
        if (msg === "HTTP REQUEST") {
            (_a = this.access_logger) === null || _a === void 0 ? void 0 : _a.info(args, msg);
        }
        else {
            (_b = this.info_logger) === null || _b === void 0 ? void 0 : _b.info(args, msg);
        }
    };
    ArlsLogger.prototype.warn = function (msg) {
        var _a, _b;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.updateLogFile();
        if (this.serverEnv === "development") {
            this.logDev(msg, args, log_enum_1.LogLevel.Warning);
        }
        if (msg === "HTTP REQUEST") {
            (_a = this.access_logger) === null || _a === void 0 ? void 0 : _a.warn(args, msg);
        }
        else {
            (_b = this.error_logger) === null || _b === void 0 ? void 0 : _b.warn(args, msg);
        }
    };
    ArlsLogger.prototype.error = function (msg) {
        var _a, _b;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.updateLogFile();
        if (this.serverEnv === "development") {
            this.logDev(msg, args, log_enum_1.LogLevel.Error);
        }
        if (msg === "HTTP REQUEST") {
            (_a = this.access_logger) === null || _a === void 0 ? void 0 : _a.error(args, msg);
        }
        else {
            (_b = this.error_logger) === null || _b === void 0 ? void 0 : _b.error(args, msg);
        }
    };
    ArlsLogger.prototype.fatal = function (msg) {
        var _a;
        (_a = this.error_logger) === null || _a === void 0 ? void 0 : _a.error('FATAL ERROR', msg);
        throw new Error(msg);
    };
    ArlsLogger.prototype.logDev = function (msg, args, logLevel) {
        if (logLevel === void 0) { logLevel = log_enum_1.LogLevel.None; }
        var date = new Date();
        var time = date.toISOString().split('T')[0] + " " + date.toLocaleTimeString('en-US', { hour12: false }) + "." + date.getMilliseconds();
        if (msg === "HTTP REQUEST") {
            var reqColor = log_enum_1.Color.FgGreen;
            if (args[0].response.statusCode > 399)
                reqColor = log_enum_1.Color.FgRed;
            else if (args[0].response.statusCode > 299)
                reqColor = log_enum_1.Color.FgYellow;
            if (!args[0].url.startsWith('/uploads')) {
                console.log(time + " - " + reqColor + "[" + args[0].type + "]" + log_enum_1.Color.Reset + " " + log_enum_1.Color.FgMagenta + args[0].url + log_enum_1.Color.Reset + " | " + args[0].processingTime + " | " + reqColor + args[0].response.statusCode + " (" + args[0].response.statusMessage + ")" + log_enum_1.Color.Reset);
            }
        }
        else {
            if (args.length === 1) {
                args = args[0];
            }
            if (typeof msg === typeof "string") {
                var header_color = log_enum_1.Color.FgWhite;
                switch (logLevel) {
                    case log_enum_1.LogLevel.None:
                        header_color = log_enum_1.Color.FgWhite;
                        break;
                    case log_enum_1.LogLevel.Success:
                        header_color = log_enum_1.Color.FgGreen;
                        break;
                    case log_enum_1.LogLevel.Info:
                        header_color = log_enum_1.Color.FgCyan;
                        break;
                    case log_enum_1.LogLevel.Warning:
                        header_color = log_enum_1.Color.FgYellow;
                        break;
                    case log_enum_1.LogLevel.Error:
                        header_color = log_enum_1.Color.FgRed;
                        break;
                }
                var header = time + " - " + header_color + "[" + msg + "]" + log_enum_1.Color.Reset;
                if (Array.isArray(args) && args.length === 0 || !args)
                    console.log(header);
                else
                    console.log(header, args);
            }
            else {
                msg = time + " - " + msg;
                console.log(msg, args);
            }
        }
    };
    return ArlsLogger;
}());
var Debug = new ArlsLogger();
exports.default = Debug;
//# sourceMappingURL=index.js.map